{{- $root := . -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "cray-oauth2-proxy.fullname" . }}-ingress
  labels:
{{ include "cray-oauth2-proxy.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ template "cray-oauth2-proxy.name" . }}-ingress
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
        app: {{ template "cray-oauth2-proxy.name" . }}-ingress
    spec:
      containers:
      - name: oauth2-proxy
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        volumeMounts:
        - mountPath: /etc/tls
          name: server-tls
          readOnly: true
        args:
        - --provider=oidc
        - --https-address=:8443
        - --cookie-secure=false
        - --ssl-insecure-skip-verify=true
        - --ssl-upstream-insecure-skip-verify=true
        - --skip-provider-button=true
        - --pass-access-token=true
        - --insecure-oidc-allow-unverified-email=true
        # Workaround to get accounts without emails able to authenticate
        - --oidc-email-claim=sub
        - --redirect-url=https://prometheus.vshasta.io/oauth2/callback
        - --cookie-secret=lwLQpx7rj_XmU3MkUd3YGjQ=
        env:
        - name: OAUTH2_PROXY_EMAIL_DOMAINS
          value: "*"
        - name: OAUTH2_PROXY_TLS_CERT_FILE
          value: "/etc/tls/tls.crt"
        - name: OAUTH2_PROXY_TLS_KEY_FILE
          value: "/etc/tls/tls.key" 
        - name: OAUTH2_PROXY_OIDC_ISSUER_URL
          valueFrom:
            secretKeyRef:
              name: {{ .Values.oauth2ClientSecret }}
              key: discovery-url
        - name: OAUTH2_PROXY_UPSTREAMS
          value: {{ .Values.upstreamUrl }}
        - name: OAUTH2_PROXY_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Values.oauth2ClientSecret }}
              key: client-id
        - name: OAUTH2_PROXY_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ .Values.oauth2ClientSecret }}
              key: client-secret                                                                        
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /ping
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ping
            port: 8443
            scheme: HTTPS
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            memory: "20Mi"
            cpu: "100m"
          limits:
            memory: "100Mi"
            cpu: "2"
      volumes:
      - name: server-tls
        secret:
          defaultMode: 420
          secretName: {{ .Values.certificateSecretName }}
      dnsPolicy: ClusterFirst
{{- with .Values.hostAliases }}
      hostAliases:
        {{- toYaml . | nindent 6 }}
{{- end }}
      restartPolicy: Always
